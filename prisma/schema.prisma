// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    MANAGER
    USER
}

model User {
    id            String            @id @default(cuid())
    name          String?
    email         String?           @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          UserRole          @default(USER)
    isAdmin       Boolean           @default(false)
    phoneNumber   String[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Event         Event[]
    boards        BoardMembership[]
    ownedBoards   Board[]
    cards         CardAssignees[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum EventType {
    WEDDING
    CONFERENCE
    SEMINAR
    WORKSHOP
    PARTY
    OTHER
}

model Event {
    id          String    @id @default(uuid())
    title       String
    type        EventType
    date        DateTime
    address     String
    lat         String?
    lng         String?
    capacity    Int
    description String
    instruction String?
    images      String[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

// kanban-board schema
model Board {
    id            String            @id @default(cuid())
    ownerId       String
    owner         User              @relation(fields: [ownerId], references: [id])
    name          String
    columns       Column[]
    background    String? // background image or color of a board
    description   String?
    members       BoardMembership[]
    memberInvites BoardInvite[]
    isPinned      Boolean           @default(false)
    createdAt     DateTime          @default(now())
    updateAt      DateTime          @updatedAt
    labels        Label[]
}

enum BoardRole {
    ADMIN
    MANAGER
    CONTRIBUTOR
}

model BoardMembership {
    id      String @id @default(cuid())
    role    BoardRole @default(CONTRIBUTOR)
    boardId String
    board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
    userId  String
    user    User   @relation(fields: [userId], references: [id])
}


model BoardInvite {
    id        String   @id @default(cuid())
    boardId   String
    board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
    email     String
    isPending Boolean  @default(true)
    expireAt  DateTime
    createdAt DateTime @default(now())
}

model Column {
    id          String   @id @default(cuid())
    columnIndex Int
    title       String
    boardId     String
    board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
    cards       Card[]
    createdAt   DateTime @default(now())
    updateAt    DateTime @updatedAt
}

model Card {
    id          String          @id @default(cuid())
    title       String
    description String
    cover       String?
    columnId    String
    rowIndex    Int
    comments    Comment[]
    assignees   CardAssignees[]
    labels      CardLabels[]
    attachments Attachment[]
    column      Column          @relation(fields: [columnId], references: [id], onDelete: Cascade)
    createdAt   DateTime        @default(now())
    updateAt    DateTime        @updatedAt
}

model Label {
    id      String       @id @default(cuid())
    name    String
    color   String
    cards   CardLabels[]
    boardId String
    board   Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Comment {
    id          String       @id @default(cuid())
    content     String
    authorId    String
    cardId      String
    attachments Attachment[]
    card        Card         @relation(fields: [cardId], references: [id])
    author      User         @relation(fields: [authorId], references: [id])
    createdAt   DateTime     @default(now())
    updateAt    DateTime     @updatedAt
}

enum AttachmentType {
    File
    Link
}

model Attachment {
    id        String         @id @default(cuid())
    path      String
    title     String?
    type      AttachmentType
    commentId String?
    comment   Comment?       @relation(fields: [commentId], references: [id])
    cardId    String?
    card      Card?          @relation(fields: [cardId], references: [id])
}

model CardLabels {
    id      String @id @default(cuid())
    cardId  String
    card    Card   @relation(fields: [cardId], references: [id])
    labelId String
    label   Label  @relation(fields: [labelId], references: [id])
}

model CardAssignees {
    id     String @id @default(cuid())
    cardId String
    card   Card   @relation(fields: [cardId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id])
}

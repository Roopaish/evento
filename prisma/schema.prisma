// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    MANAGER
    USER
}

model Asset {
    id           String @id
    name         String
    url          String @unique
    thumbnailUrl String @unique
    size         Float

    user   User   @relation(fields: [userId], references: [id])
    userId String

    event   Event? @relation("EventAssets", fields: [eventId], references: [id])
    eventId Int?

    eventManager   Event? @relation("ManagerImage", fields: [managerEventId], references: [id])
    managerEventId Int?   @unique

    jobApplication   JobApplication? @relation("JobApplication", fields: [jobApplicationId], references: [id])
    jobApplicationId Int?            @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    role          UserRole      @default(USER)
    phoneNumber   String[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    chatMessage   ChatMessage[]
    assets        Asset[]

    createdEvents Event[] @relation("CreatedEvents")
    joinedEvents  Event[] @relation("JoinedEvents")

    sentInvitations Invitation[]     @relation("Sender")
    jobApplications JobApplication[]

    seenMessages ChatMessage[] @relation("SeenBy")

    assignedTasks Task[] @relation("AssignedTo")
    createdTasks  Task[] @relation("CreatedBy")
}

enum EventType {
    WEDDING
    CONFERENCE
    SEMINAR
    WORKSHOP
    PARTY
    OTHER
}

model Event {
    id           Int       @id @default(autoincrement())
    title        String
    type         EventType
    date         DateTime
    address      String
    lat          String?
    lng          String?
    capacity     Int
    description  String
    instruction  String?
    price        Float?
    managerName  String?
    managerPhone String?
    managerEmail String?
    managerImage Asset?    @relation("ManagerImage")

    assets    Asset[]  @relation("EventAssets")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation("CreatedEvents", fields: [createdById], references: [id])
    createdById String

    participants User[]        @relation("JoinedEvents")
    jobPositions JobPosition[]
    chatGroup    ChatGroup?

    invitations Invitation[]
    tasks       Task[]

    @@index([title, address])
}

model JobPosition {
    id            Int     @id @default(autoincrement())
    title         String
    description   String?
    noOfEmployees Int
    salary        Float?

    event   Event @relation(fields: [eventId], references: [id])
    eventId Int

    jobApplications JobApplication[]
}

model JobApplication {
    id            Int         @id @default(autoincrement())
    message       String
    status        Status      @default(PENDING)
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    jobPosition   JobPosition @relation(fields: [jobPositionId], references: [id])
    jobPositionId Int
    cv            Asset?      @relation("JobApplication")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChatGroup {
    id       Int           @id @default(autoincrement())
    messages ChatMessage[] @relation("ChatGroupMessages")

    latestMessage   ChatMessage? @relation("LatestMessage", fields: [latestMessageId], references: [id])
    latestMessageId Int?         @unique

    event   Event @relation(fields: [eventId], references: [id])
    eventId Int   @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ChatMessage {
    id      Int    @id @default(autoincrement())
    message String

    chatGroup              ChatGroup  @relation("ChatGroupMessages", fields: [chatGroupId], references: [id])
    chatGroupId            Int
    latestMessageChatGroup ChatGroup? @relation("LatestMessage")

    user   User   @relation(fields: [userId], references: [id])
    userId String

    seenBy User[] @relation("SeenBy")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum Status {
    PENDING
    ACCEPTED
    REJECTED
}

model Invitation {
    id          Int    @id @default(autoincrement())
    email       String
    uniqueToken String

    status Status @default(PENDING)

    sender   User   @relation("Sender", fields: [senderId], references: [id])
    senderId String
    event    Event  @relation(fields: [eventId], references: [id])
    eventId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum TaskStatus {
    PENDING
    COMPLETED
    IN_PROGRESS
}

model Task {
    id          Int        @id @default(autoincrement())
    title       String
    description String?
    status      TaskStatus @default(PENDING)
    dueDate     DateTime?

    assignedTo User[] @relation("AssignedTo")

    createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])
    createdById String

    event   Event? @relation(fields: [eventId], references: [id])
    eventId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    MANAGER
    USER
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    role          UserRole      @default(USER)
    phoneNumber   String[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Event         Event[]
    ChatGroup     ChatGroup[]
    chatMessage   ChatMessage[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum EventType {
    WEDDING
    CONFERENCE
    SEMINAR
    WORKSHOP
    PARTY
    OTHER
}

model Event {
    id          String    @id @default(uuid())
    title       String
    type        EventType
    date        DateTime
    address     String
    lat         String?
    lng         String?
    capacity    Int
    description String
    instruction String?
    // images      String[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model ChatGroup {
    id          String        @id @default(cuid())
    name        String
    createdAt   DateTime      @default(now())
    user        User          @relation(fields: [userId], references: [id])
    userId      String
    chatMessage ChatMessage[]
}

model ChatMessage {
    id          String    @id @default(cuid())
    message     String
    createdAt   DateTime  @default(now())
    user        User      @relation(fields: [createdById], references: [id])
    chatGroup   ChatGroup @relation(fields: [chatGroupId], references: [id])
    createdById String
    chatGroupId String
}
